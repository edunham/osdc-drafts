Building your Resume with Open Source

In this article, I'll share my technique for leveraging new or current open
source contributions to stand out as a great candidate for my desired job
in the technology field. 

No goal can be accomplished without first being set. Before jumping into a new
commitment or spending the evening overhauling your resume, it pays to clearly
define the traits of the job you're hunting for. Your resume is a piece of
persuasive writing, so you have to know your audience for it to reach its full
potential. Your resume's audience is anyone with the need for your skills and
the budget to hire you, so when editing, read your resume while imagining what
it's like to be in their position. Do you look like a candidate that you would
hire? 

I personally find it helpful to make a list of the key traits that I think the
ideal candidate for my target job diplays. I gather this list from a
combination of personal experience, reading job postings, and asking
colleagues in similar roles. LinkedIn and conferences are great places to find
people happy to offer this sort of advice: Many people enjoy talking about
themselves, and inviting them to tell part of their own story in order to help
expand your knowledge makes everyone feel good. As you talk to others about
their career paths, you'll gain insights not only into what gives people the
type of career you want, but also into which traits or behaviors correspond to
ending up in situations you'd rather avoid! 

For example, the list of key traits for a junior role might look like:

Technical: 
    * Experience with CI, Jenkins preferred
    * Strong scripting background in Python & Ruby
    * Familiarity with Eclipse IDE
    * Basic Git and Bash
Personal: 
    * Self-directed learner
    * Clear communication and documentation skills
    * Experience working on a multi-person development team
    * Familiarity with issue tracker workflow

Remember, you don't have to meet every single item listed in a job description
to get an interview. 

[TODO: link that research about how people apply with only ~80% of qualifications]

The description describes whoever left the role, and if
you start out knowing everything, you've likely signed yourself up for a few
years that don't challenge or expand your skill set. If you're nervous about
missing a particular technology that they list, do some research into it to
see whether comparable skills from another experience would apply. For
example, someone who's never used Jenkins might still understand the
principles of continuous integration testing from working on a project that
uses BuildBot or TravisCI. 

Once you've identified the job you want and the skills you'll need to
demonstrate to impress your interviewers for it, your next course of action
will vary based on how many publicly brag-able projects you've been involved
with recently. 

Tailoring existing involvement
------------------------------

Start by making a list of all the projects you've been involved with in the
past few years. One way to get a quick list of things you've worked on lately
is to navigate to the 'repositories' tab of your GitHub profile, and filter
the list by clicking on 'Forks'. Additionally, look down your Organizations
list at https://github.com/settings/organizations for places you might have
been engaging in leadership experience. 

If you have an existing resume, make sure each item of experience from it is
on the list as well. 

Consider any IRC channel where you have special permissions as a potential
leadership experience. Check your Meetup or Eventbrite accounts and add any
events that you organize or volunteer at to this list. Skim your calendar for
the past year and note any volunteering, mentoring, or public speaking
engagements. 

Now for the hard part: Map the list of skills onto the list of experiences. I
like to assign a letter or number to each trait needed for the job, then mark
the same symbol next to every piece of experience or involvement where you
demonstrated the trait. When in doubt, claim it anyway -- your problem is more
likely a reluctance to brag than actual incompetence. 

This is the point in the process at which resume writers are often fettered by
a reluctance to risk overselling their own skills. It often helps to re-frame
the question as "Did someone who organized a meetup show leadership and
planning skills?" rather than "Did *I* personally show these skills when I
organized that meetup?".

If you've been suficiently thorough at figuring out where your free time has
gone for the past year or two and you code a lot, you might now be facing a
surprising problem: Too many items to fit on a single-page resume! If anything
on your list of experiences didn't demonstrate any of the skills you're trying
to showcase, cross it off. If an item demonstrates few skills and you don't
have any stories you enjoy telling about it, cross it off. If this abridged
list of things you've done still won't fit in the format of a resume,
prioritize the experiences from which you gained either a story that you're
comfortable telling which showcases a desired skill, or extensive experience
with a desired technology.  

Joining a New Project
---------------------

Maybe you're not involved with open source yet, or your dream job requires a
language or skill that you haven't touched before. Open source can be a great
place to both build and publicly showcase new skills, if you go in with the
right expectations! However, if you ignore basic manners or mistreat a
project, open source involvement can also be a place to publicly diminish your
own reputation. Here are some of the expectations that could get you in
trouble: 

Myth: I'll just join this project's IRC channel and they'll teach me to
code, and I won't have to do any hard work like reading a book!

Fact: That's the attitude of a help vampire, and most thriving communities
are good at getting rid of them. You'll be politely asked to go read the
documentation. 

[TODO: link to help vampire thing]

Myth: I got a couple of lines into the code base, so I can claim to be a core
contributor without any ill effects! (Or, I wrote a project in this language,
so I can claim that I work on the lanuage itself!)

Fact: While this type of claim may successfully swindle HR and get you in the
door, your interview is likely to be horribly embarrassing. At best your
future boss will fact-check your claims by consulting the project's web site
and asking their peers; at worst, they'll take your claims at face value and
interview you on extremely advanced topics relating to the project. 

I've heard a delightful piece of folklore about an arrogant young coder who
claimed decades of experience contributing to Python core on his resume and
scored an interview, and ended up getting quizzed on the quirks of the
language's internals by Guido Van Rossum.

Myth: I'll just fork the project and make my changes there! Nobody will
criticize my code, and I'll look like a leader for taking the initiative to
make a fork!

Fact: No. Do you really want to work in a culture that encourages people to
avoid code review, and thinks avoiding the community to make themselves look
good is a desirable thing to do? 


In short, while joining a new project can help boost your skills and resume,
attempting to take advantage of a project for your own gain will not improve
your skills or reputation. 

The good news is that it's easy to find a project by the language or tools
that it uses! There are a bunch (http://edunham.net/pages/issue_aggregators.html) of 
issue aggregator type sites out there, each of which caters to a slightly
different audience. If you're joining a project specifically to build a skill
which aids your job hunt, I'd recommend starting no less than 3-6 months
before you want to have code you're proud of that shows you understand the
basics of the language. If it's only your second or third language and you're
not using it full time, it could take you over a year to reach intermediate
proficiency. Fortunately, you can hone the skill of learning new tools until
it takes only a couple weeks of focused study to get up to speed in a language
similar to those you already know.

Once you've found a project with a welcoming community (often indicated by at
least a CONTRIBUTING guide and a code of conduct), go forth and enjoy learning
a new skill! 

[TODO: links to getting started guides]


